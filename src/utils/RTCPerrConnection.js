
let conn = new RTCPeerConnection(configuration);

// 当终端用户在对等连接中添加视频或者音频流的时候会被触发
conn.onaddstream = (stream) =>{

}

// 发送信令的过程：
/*
  1. 为一个对等连接创建潜在的候选列表；
  2. 用户或者计算机算法将选择一个用户去连接
  3. 信令层将通知那个用户有人想连接TA，用户可以接收或者拒绝
  4. 当连接的请求被接受时，第一个用户会被通知
  5. 若接受，第一个用户将初始化RTCPerrConnection
  6. 双方将通过信令通道交换各自电脑的硬件和软件信息
  7. 双发将通过信令交换各自电脑的位置信息
  8. 用户之间的连接成功或者失败
*/


/*
  会话描述协议 SDP
  SDP 有浏览器提供的基于字符串的二进制数据对象 
  <key>=<value>\n
  key 是一个单字符，用来表明值的类型
  value 是由机器可读的配置项组成的结构的一组文本

  SDP涵盖一个用户的描述、时间配置和对媒体的限制

*/

/*
  找到一条明确的连接，可以使用下面的技术
  - NAT会话穿透工具  STUN
  - 使用中继技术穿透NAT TURN
  - 交互式连接建立 ICE -> 使用STUN和TURN为对等连接提供正确的路由
*/

/*
  创建一个基本的WebRTC应用
  1. 创建一个RTCPeerConnection
  2. 创建SDP offer 回应
  3. 为双方找到ICE候选路径
*/